//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BackOffice.MessageProxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseEntityOflong", Namespace="http://schemas.datacontract.org/2004/07/Service.Utils")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BackOffice.MessageProxy.Message))]
    public partial class BaseEntityOflong : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UpdatedAtField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedAt {
            get {
                return this.CreatedAtField;
            }
            set {
                if ((this.CreatedAtField.Equals(value) != true)) {
                    this.CreatedAtField = value;
                    this.RaisePropertyChanged("CreatedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UpdatedAt {
            get {
                return this.UpdatedAtField;
            }
            set {
                if ((this.UpdatedAtField.Equals(value) != true)) {
                    this.UpdatedAtField = value;
                    this.RaisePropertyChanged("UpdatedAt");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/Service.Models")]
    [System.SerializableAttribute()]
    public partial class Message : BackOffice.MessageProxy.BaseEntityOflong {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessageProxy.MessageContract")]
    public interface MessageContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryOf_Int64_Message/GetById", ReplyAction="http://tempuri.org/IRepositoryOf_Int64_Message/GetByIdResponse")]
        BackOffice.MessageProxy.Message GetById(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryOf_Int64_Message/GetById", ReplyAction="http://tempuri.org/IRepositoryOf_Int64_Message/GetByIdResponse")]
        System.Threading.Tasks.Task<BackOffice.MessageProxy.Message> GetByIdAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryOf_Int64_Message/Insert", ReplyAction="http://tempuri.org/IRepositoryOf_Int64_Message/InsertResponse")]
        BackOffice.MessageProxy.Message Insert(BackOffice.MessageProxy.Message entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryOf_Int64_Message/Insert", ReplyAction="http://tempuri.org/IRepositoryOf_Int64_Message/InsertResponse")]
        System.Threading.Tasks.Task<BackOffice.MessageProxy.Message> InsertAsync(BackOffice.MessageProxy.Message entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryOf_Int64_Message/Delete", ReplyAction="http://tempuri.org/IRepositoryOf_Int64_Message/DeleteResponse")]
        bool Delete(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryOf_Int64_Message/Delete", ReplyAction="http://tempuri.org/IRepositoryOf_Int64_Message/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryOf_Int64_Message/Update", ReplyAction="http://tempuri.org/IRepositoryOf_Int64_Message/UpdateResponse")]
        BackOffice.MessageProxy.Message Update(BackOffice.MessageProxy.Message entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryOf_Int64_Message/Update", ReplyAction="http://tempuri.org/IRepositoryOf_Int64_Message/UpdateResponse")]
        System.Threading.Tasks.Task<BackOffice.MessageProxy.Message> UpdateAsync(BackOffice.MessageProxy.Message entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryOf_Int64_Message/SearchFor", ReplyAction="http://tempuri.org/IRepositoryOf_Int64_Message/SearchForResponse")]
        BackOffice.MessageProxy.Message[] SearchFor(System.Func<BackOffice.MessageProxy.Message, bool> predicate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryOf_Int64_Message/SearchFor", ReplyAction="http://tempuri.org/IRepositoryOf_Int64_Message/SearchForResponse")]
        System.Threading.Tasks.Task<BackOffice.MessageProxy.Message[]> SearchForAsync(System.Func<BackOffice.MessageProxy.Message, bool> predicate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryOf_Int64_Message/GetAll", ReplyAction="http://tempuri.org/IRepositoryOf_Int64_Message/GetAllResponse")]
        BackOffice.MessageProxy.Message[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryOf_Int64_Message/GetAll", ReplyAction="http://tempuri.org/IRepositoryOf_Int64_Message/GetAllResponse")]
        System.Threading.Tasks.Task<BackOffice.MessageProxy.Message[]> GetAllAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MessageContractChannel : BackOffice.MessageProxy.MessageContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessageContractClient : System.ServiceModel.ClientBase<BackOffice.MessageProxy.MessageContract>, BackOffice.MessageProxy.MessageContract {
        
        public MessageContractClient() {
        }
        
        public MessageContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MessageContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MessageContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MessageContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public BackOffice.MessageProxy.Message GetById(long id) {
            return base.Channel.GetById(id);
        }
        
        public System.Threading.Tasks.Task<BackOffice.MessageProxy.Message> GetByIdAsync(long id) {
            return base.Channel.GetByIdAsync(id);
        }
        
        public BackOffice.MessageProxy.Message Insert(BackOffice.MessageProxy.Message entity) {
            return base.Channel.Insert(entity);
        }
        
        public System.Threading.Tasks.Task<BackOffice.MessageProxy.Message> InsertAsync(BackOffice.MessageProxy.Message entity) {
            return base.Channel.InsertAsync(entity);
        }
        
        public bool Delete(long id) {
            return base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(long id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public BackOffice.MessageProxy.Message Update(BackOffice.MessageProxy.Message entity) {
            return base.Channel.Update(entity);
        }
        
        public System.Threading.Tasks.Task<BackOffice.MessageProxy.Message> UpdateAsync(BackOffice.MessageProxy.Message entity) {
            return base.Channel.UpdateAsync(entity);
        }
        
        public BackOffice.MessageProxy.Message[] SearchFor(System.Func<BackOffice.MessageProxy.Message, bool> predicate) {
            return base.Channel.SearchFor(predicate);
        }
        
        public System.Threading.Tasks.Task<BackOffice.MessageProxy.Message[]> SearchForAsync(System.Func<BackOffice.MessageProxy.Message, bool> predicate) {
            return base.Channel.SearchForAsync(predicate);
        }
        
        public BackOffice.MessageProxy.Message[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<BackOffice.MessageProxy.Message[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
    }
}
